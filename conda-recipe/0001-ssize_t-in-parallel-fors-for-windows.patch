diff --git a/src/laplacian_smoothing.cpp b/src/laplacian_smoothing.cpp
index f15c615..7c44f10 100644
--- a/src/laplacian_smoothing.cpp
+++ b/src/laplacian_smoothing.cpp
@@ -4,6 +4,8 @@
 // #include <unordered_set>
 #include <iostream>
 
+#include <BaseTsd.h>
+typedef SSIZE_T ssize_t;
 
 #include <boost/container/flat_set.hpp>
 
@@ -74,7 +76,7 @@ void smooth(Mesh& mesh, unsigned int rounds)
 	for (unsigned int i = 0; i < rounds; ++i)
 	{
 		#pragma omp parallel for
-		for (size_t vert = 0; vert < vertexCount; ++vert)
+		for (ssize_t vert = 0; vert < vertexCount; ++vert)
 		{
 			for (unsigned int off = 0; off < 3; ++off)
 			{
diff --git a/src/marching_cubes.cpp b/src/marching_cubes.cpp
index bf226dc..7ff4cb8 100644
--- a/src/marching_cubes.cpp
+++ b/src/marching_cubes.cpp
@@ -1,5 +1,7 @@
 #include <cmath>
 #include <utility>
+#include <BaseTsd.h>
+typedef SSIZE_T ssize_t;
 #include "marching_cubes.h"
 
 
@@ -618,7 +620,7 @@ void calculateNormals(Mesh& mesh)
 	auto normals = new Point[vertexCount];
 
 	#pragma omp parallel for
-	for (size_t i = 0; i < vertexCount; ++i)
+	for (ssize_t i = 0; i < vertexCount; ++i)
 	{
 		normals[i][0] = 0;
 		normals[i][1] = 0;
@@ -626,7 +628,7 @@ void calculateNormals(Mesh& mesh)
 	}
 
 	#pragma omp parallel for
-	for (size_t i = 0; i < triangleCount; ++i) {
+	for (ssize_t i = 0; i < triangleCount; ++i) {
 		Point vec1, vec2, normal;
 		size_t id0, id1, id2;
 		id0 = triangles[i * 3];
@@ -656,7 +658,7 @@ void calculateNormals(Mesh& mesh)
 	}
 
 	#pragma omp parallel for
-	for (size_t i = 0; i < vertexCount; ++i) {
+	for (ssize_t i = 0; i < vertexCount; ++i) {
 		float length = sqrt(normals[i][0] * normals[i][0] + normals[i][1] * normals[i][1] + normals[i][2] * normals[i][2]);
 		if (length > 0.) {
 			normals[i][0] /= length;
-- 
2.25.1

